---
# Source: chart/templates/backend.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-chart-backend
  labels:
    io.kompose.service: backend
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (cbf2835db)
spec:
  type: ClusterIP
  selector:
    io.kompose.service: backend
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
  ports:
  - name: "8000"
    port: 8000
    targetPort: 8000
---
# Source: chart/templates/frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-chart-frontend
  labels:
    io.kompose.service: frontend
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (cbf2835db)
spec:
  type: ClusterIP
  selector:
    io.kompose.service: frontend
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
  ports:
  - name: "8080"
    port: 8080
    targetPort: 80
---
# Source: chart/templates/mongo.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-chart-mongo
  labels:
    io.kompose.service: mongo
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (cbf2835db)
spec:
  type: ClusterIP
  selector:
    io.kompose.service: mongo
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
  ports:
  - name: "27017"
    port: 27017
    targetPort: 27017
---
# Source: chart/templates/restore.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-chart-restore
  labels:
    io.kompose.service: mongo-restore
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (cbf2835db)
spec:
  imagePullSecrets:
    - name: regcred
  containers:
  - image: ghcr.io/shayops2/wct-stats-mongo-restore:1.0
    name: mongo-restore
    command:
        - /bin/sh
        - -c
    args:
      - mongorestore --host release-name-chart-mongo --dir=/dump --drop    
  restartPolicy: Never
---
# Source: chart/templates/deployment_backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-chart-backend
  labels:
    io.kompose.service: backend
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (cbf2835db)
spec:
  replicas: 1
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      io.kompose.service: backend
      app.kubernetes.io/name: chart
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        io.kompose.service: backend
        app.kubernetes.io/name: chart
        app.kubernetes.io/instance: release-name
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (cbf2835db)
    spec:
      imagePullSecrets:
        - name: regcred
      containers:
      - args:
        - export JWT_SECRET_KEY=$(cat $JWT_SECRET_KEY_FILE)  && exec gunicorn main:app -c
          gunicorn.conf.py -k uvicorn.workers.UvicornWorker --bind 0.0.0:8000
        command:
        - /bin/sh
        - -c
        env:
        - name: ENV
          value: "production"
        - name: JWT_SECRET_KEY_FILE
          value: "/run/secrets/backend-password"
        - name: MONGODB_URL
          value: "mongodb://release-name-chart-mongo:27017"
        image: ghcr.io/shayops2/wct-stats-backend:0.1
        name: backend
        ports:
        - containerPort: 8000
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /run/secrets
          name: backend-secret
      initContainers:
      - args:
        - python -c 'import secrets; print(secrets.token_urlsafe(32))' > /run/secrets/backend-password
        command:
        - /bin/sh
        - -c
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: python:3.12-slim
        imagePullPolicy: IfNotPresent
        name: password-init
        resources: {}
        volumeMounts:
        - mountPath: /run/secrets
          name: backend-secret
      restartPolicy: Always
      volumes:
      - emptyDir: {}
        name: backend-secret
---
# Source: chart/templates/deployment_frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-chart-frontend
  labels:
    io.kompose.service: frontend
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (cbf2835db)
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: frontend
      app.kubernetes.io/name: chart
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        io.kompose.service: frontend
        app.kubernetes.io/name: chart
        app.kubernetes.io/instance: release-name
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (cbf2835db)
    spec:
      imagePullSecrets:
        - name: regcred
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: ghcr.io/shayops2/wct-stats-frontend:0.1
        name: frontend
        ports:
        - containerPort: 80
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
# Source: chart/templates/deployment_mongo.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-chart-mongo
  labels:
    io.kompose.service: mongo
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (cbf2835db)
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongo
      app.kubernetes.io/name: chart
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        io.kompose.service: mongo
        app.kubernetes.io/name: chart
        app.kubernetes.io/instance: release-name
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (cbf2835db)
    spec:
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: mongo:6.0
        args:
        - --bind_ip_all
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - db.adminCommand('ping')
          failureThreshold: 5
          periodSeconds: 10
          timeoutSeconds: 5
        name: release-name-chart-mongo
        ports:
        - containerPort: 27017
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
# Source: chart/templates/backend-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-chart-backend-ingress
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm  
spec:
  ingressClassName: traefik
  rules:
  - host: backend.example
    http:
      paths:
      - backend:
          service:
            name: release-name-chart-backend
            port:
              number: 8000
        path: /
        pathType: Prefix
---
# Source: chart/templates/frontend-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-chart-frontend-ingress
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: traefik
  rules:
  - host: frontend.example
    http:
      paths:
      - backend:
          service:
            name: release-name-chart-frontend
            port:
              number: 8080
        path: /
        pathType: Prefix
