name: Build And Deploy WCT Stats Backend
on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'


jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Start FastAPI app (in background)
        run: |
          cd backend
          uvicorn main:app --host 0.0.0.0 --port 8000 &
        shell: bash

      - name: Wait for FastAPI to be ready
        run: |
          for i in {1..10}; do
            curl -s http://localhost:8000/ && break
            echo "Waiting for FastAPI..."
            sleep 2
          done

      - name: Run tests
        run: |
          echo "Running tests..."
          cd backend
          pytest --junit-xml=test-results.xml
          echo "Tests completed."
    
      - name: Upload test results
        uses: pmeier/pytest-results-action@main
        with:
          path: backend/test-results.xml
          summary: true


  backend:
    # run after backend-tests successfully completes
    needs: backend-tests
    if: ${{ success() }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: bump version
        run: |
          echo "Bumping version..."
          VERSION=$(cat backend/version.txt)
          VERSION=${VERSION:1}

          IFS='.' read -r major minor patch <<< "$VERSION"    
          COMMIT_MSG=$(git log -1 --pretty=%B)

          echo "Commit message: $COMMIT_MSG"

          # Determine bump type
          if echo "$COMMIT_MSG" | grep -iqE "MAJOR|BREAKING"; then
            major=$((major + 1))
            minor=0
            patch=0
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -iqE "MINOR|feature|add"; then
            minor=$((minor + 1))
            patch=0
            BUMP_TYPE="minor"
          else
            patch=$((patch + 1))
            BUMP_TYPE="patch"
          fi

          NEW_VERSION="v$major.$minor.$patch"
          echo "Bumped $BUMP_TYPE version: $VERSION â†’ $NEW_VERSION"      
          
          echo "$NEW_VERSION" > backend/version.txt
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV


      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ vars.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Build and push backend image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          context: backend
          push: true
          tags: |
            ghcr.io/shayops2/wct-stats-backend:latest 
            ghcr.io/shayops2/wct-stats-backend:${{ env.VERSION }}

      - name: Commit, pull, and push version bump
        uses: mgrybyk-org/git-commit-pull-push-action@v1
        with:
          branch: main                       
          commit_message: "Bump backend version to ${{ env.VERSION }} [skip ci]"
          pull_args: --rebase -X theirs            

